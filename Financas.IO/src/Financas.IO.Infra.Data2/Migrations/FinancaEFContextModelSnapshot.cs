// <auto-generated />
using System;
using Financas.IO.Infra.Data2.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Financas.IO.Infra.Data2.Migrations
{
    [DbContext(typeof(FinancaEFContext))]
    partial class FinancaEFContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Financas.IO.Domain.CadastrosBasico.Agencias.Agencia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<Guid>("BancoId");

                    b.Property<DateTime>("DataDeCadastro");

                    b.Property<Guid?>("EnderecoId");

                    b.Property<string>("NomeDaAgencia")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NumeroDaAgencia");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.ToTable("Agencias");
                });

            modelBuilder.Entity("Financas.IO.Domain.CadastrosBasico.Agencias.Cidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<int>("CodigoIBGE");

                    b.Property<DateTime>("DataDeCadastro");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsCapital");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("varchar(2)");

                    b.HasKey("Id");

                    b.ToTable("Cidades");
                });

            modelBuilder.Entity("Financas.IO.Domain.CadastrosBasico.Agencias.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgenciaId");

                    b.Property<bool>("Ativo");

                    b.Property<string>("Bairro")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<Guid>("CidadeId");

                    b.Property<string>("Complemento")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("DataDeCadastro");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("AgenciaId")
                        .IsUnique()
                        .HasFilter("[AgenciaId] IS NOT NULL");

                    b.HasIndex("CidadeId");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("Financas.IO.Domain.CadastrosBasico.Bancos.Banco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<DateTime>("DataDeCadastro");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Bancos");
                });

            modelBuilder.Entity("Financas.IO.Domain.CadastrosBasico.PlanosDeContas.GrupoDeConta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<DateTime>("DataDeCadastro");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("GrupoDeContas");
                });

            modelBuilder.Entity("Financas.IO.Domain.CadastrosBasico.PlanosDeContas.PlanoDeConta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<DateTime>("DataDeCadastro");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("GrupoDeContaId");

                    b.Property<int>("TipoDeMovimento");

                    b.HasKey("Id");

                    b.HasIndex("GrupoDeContaId");

                    b.ToTable("PlanoDeContas");
                });

            modelBuilder.Entity("Financas.IO.Domain.GerenciarContaCorrente.ContasCorrente.CentroDeCusto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<DateTime>("DataDeCadastro");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CentroDeCustos");
                });

            modelBuilder.Entity("Financas.IO.Domain.GerenciarContaCorrente.ContasCorrente.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime>("DataDeCadastro");

                    b.Property<DateTime>("DataDeNascimento");

                    b.Property<string>("Email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Financas.IO.Domain.GerenciarContaCorrente.ContasCorrente.ContaCorrente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgenciaId");

                    b.Property<bool>("Ativo");

                    b.Property<Guid>("ClienteId");

                    b.Property<DateTime>("DataDeCadastro");

                    b.Property<string>("NumeroDaContaCorrente")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AgenciaId");

                    b.HasIndex("ClienteId");

                    b.ToTable("ContasCorrentes");
                });

            modelBuilder.Entity("Financas.IO.Domain.GerenciarContaCorrente.ContasCorrente.Lancamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<Guid>("CentroDeCustoId");

                    b.Property<int>("Competencia");

                    b.Property<Guid>("ContaCorrenteId");

                    b.Property<DateTime>("DataDeCadastro");

                    b.Property<DateTime>("DataDoLancamento");

                    b.Property<string>("Observacao")
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("PlanoDeContaId");

                    b.Property<int>("Sequencial")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("CentroDeCustoId");

                    b.HasIndex("ContaCorrenteId");

                    b.HasIndex("PlanoDeContaId");

                    b.ToTable("Lancamentos");
                });

            modelBuilder.Entity("Financas.IO.Domain.CadastrosBasico.Agencias.Agencia", b =>
                {
                    b.HasOne("Financas.IO.Domain.CadastrosBasico.Bancos.Banco", "Banco")
                        .WithMany("Agencias")
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Financas.IO.Domain.CadastrosBasico.Agencias.Endereco", b =>
                {
                    b.HasOne("Financas.IO.Domain.CadastrosBasico.Agencias.Agencia", "Agencia")
                        .WithOne("Endereco")
                        .HasForeignKey("Financas.IO.Domain.CadastrosBasico.Agencias.Endereco", "AgenciaId");

                    b.HasOne("Financas.IO.Domain.CadastrosBasico.Agencias.Cidade", "Cidade")
                        .WithMany("Enderecos")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Financas.IO.Domain.CadastrosBasico.PlanosDeContas.PlanoDeConta", b =>
                {
                    b.HasOne("Financas.IO.Domain.CadastrosBasico.PlanosDeContas.GrupoDeConta", "GrupoDeConta")
                        .WithMany("PlanoDeContas")
                        .HasForeignKey("GrupoDeContaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Financas.IO.Domain.GerenciarContaCorrente.ContasCorrente.ContaCorrente", b =>
                {
                    b.HasOne("Financas.IO.Domain.CadastrosBasico.Agencias.Agencia", "Agencia")
                        .WithMany("ContasCorrentes")
                        .HasForeignKey("AgenciaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Financas.IO.Domain.GerenciarContaCorrente.ContasCorrente.Cliente", "Cliente")
                        .WithMany("ContasCorrentes")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Financas.IO.Domain.GerenciarContaCorrente.ContasCorrente.Lancamento", b =>
                {
                    b.HasOne("Financas.IO.Domain.GerenciarContaCorrente.ContasCorrente.CentroDeCusto", "CentroDeCusto")
                        .WithMany("Lancamentos")
                        .HasForeignKey("CentroDeCustoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Financas.IO.Domain.GerenciarContaCorrente.ContasCorrente.ContaCorrente", "ContaCorrente")
                        .WithMany("Lancamentos")
                        .HasForeignKey("ContaCorrenteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Financas.IO.Domain.CadastrosBasico.PlanosDeContas.PlanoDeConta", "PlanoDeConta")
                        .WithMany("Lancamentos")
                        .HasForeignKey("PlanoDeContaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
